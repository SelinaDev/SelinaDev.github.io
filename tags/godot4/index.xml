<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>godot4 on SelinaDev</title>
    <link>https://selinadev.github.io/tags/godot4/</link>
    <description>Recent content in godot4 on SelinaDev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Jul 2023 08:00:00 +0100</lastBuildDate><atom:link href="https://selinadev.github.io/tags/godot4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Yet Another Roguelike Tutorial, Part 3</title>
      <link>https://selinadev.github.io/07-rogueliketutorial-03/</link>
      <pubDate>Thu, 13 Jul 2023 08:00:00 +0100</pubDate>
      
      <guid>https://selinadev.github.io/07-rogueliketutorial-03/</guid>
      <description>Part 3: Generating a Dungeon This is the next part to https://selinadev.github.io/06-rogueliketutorial-02/. In this part we will handle dungeon generation. We will write a procedural dungeon generator that will give us a new dungeon each time. The algorithm we will use is relatively simple, we will place rooms in a way that they don&amp;rsquo;t overlap, then connect each room to the previous with an L-shaped tunnel. We can think about it like starting with solid stone and carving these structures out of it.</description>
    </item>
    
    <item>
      <title>Yet Another Roguelike Tutorial, Part 2</title>
      <link>https://selinadev.github.io/06-rogueliketutorial-02/</link>
      <pubDate>Tue, 11 Jul 2023 08:00:00 +0100</pubDate>
      
      <guid>https://selinadev.github.io/06-rogueliketutorial-02/</guid>
      <description>Part 2: Generic Entity and the Map Continuing from the last tutorial ( https://selinadev.github.io/05-rogueliketutorial-01/ ), we will now move to creating a more generic entity, and then start on the structure of our map.
So let&amp;rsquo;s start with creating out entity class. I want to point out that my approach differs a bit from the original tutorial. In that tutorial all properties of an entity are set in its constructor. A later part eventually uses a factory pattern to create a few prototype entities in code and then spawn copies of them.</description>
    </item>
    
    <item>
      <title>Yet Another Roguelike Tutorial, Parts 0 and 1</title>
      <link>https://selinadev.github.io/05-rogueliketutorial-01/</link>
      <pubDate>Tue, 04 Jul 2023 08:00:00 +0100</pubDate>
      
      <guid>https://selinadev.github.io/05-rogueliketutorial-01/</guid>
      <description>Here i&amp;rsquo;ll start an attempt for something I&amp;rsquo;ve wanted to do for a long time. I&amp;rsquo;ve been interested in traditional roguelikes for a while now. Given that I&amp;rsquo;m also interested in game development, it should not come as a surprise that I have looked into how to make a roguelike as well. There is a very nice and reasonably comprehensive tutorial online, that exists in multiple versions. One of the more well known versions has to be the one at Roguelike Tutorials.</description>
    </item>
    
    <item>
      <title>Dungeon Crawler Practice Project, Part1: The Start</title>
      <link>https://selinadev.github.io/04-dungeon-crawler-01/</link>
      <pubDate>Tue, 16 May 2023 17:00:00 +0100</pubDate>
      
      <guid>https://selinadev.github.io/04-dungeon-crawler-01/</guid>
      <description>After finishing my last tutorial and after a longer game dev hiatus, I wanted to do a small to medium size practice game dev project. I do have an idea for another, somewhat bigger project for which I already did a little prototyping, but I realized that there are a few things I want to engage with first. For one, while I have a few somewhat finished jam games, ColoRise (https://selinadev.</description>
    </item>
    
  </channel>
</rss>
